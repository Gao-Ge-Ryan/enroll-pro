# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log error;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
    use epoll;  # Linux 平台推荐
    multi_accept on;
}

http {

    server_tokens off;

    # 启用 gzip 压缩提升性能
    gzip on;
    gzip_comp_level 6;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript application/xml text/javascript;
    gzip_vary on;

    #自定义设置使用的TLS协议的类型以及加密套件（以下为配置示例，请您自行评估是否需要配置）
    #TLS协议版本越高，HTTPS通信的安全性越高，但是相较于低版本TLS协议，高版本TLS协议对浏览器的兼容性较差。
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1.2 TLSv1.3;
    #表示优先使用服务端加密套件。默认开启
    ssl_prefer_server_ciphers on;

    # 安全响应头设置
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    # 使用 preload 强制所有支持 HSTS 的浏览器只通过 HTTPS 访问您的网站
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    client_max_body_size 500M;
    # 单个IP地址的并发连接数和请求速率限制
    limit_conn_zone $binary_remote_addr zone=connLimit:10m;
    limit_req_zone $binary_remote_addr zone=rateLimit:10m rate=250r/s;
    limit_conn_zone $binary_remote_addr zone=backendConnLimit:10m;
    limit_req_zone $binary_remote_addr zone=backendRateLimit:10m rate=20r/s;
    # 设置超过速率限制时返回 429 状态码
    limit_conn_status 429;
    limit_req_status 429;
    # 超出连接限制时，记录警告日志
    # limit_conn_log_level warn;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen 80;
        #填写证书绑定的域名
        server_name _;
        #将所有HTTP请求通过rewrite指令重定向到HTTPS。
        rewrite ^(.*)$ https://$host$1 permanent;
    }

   server {
       listen       443 ssl http2;
       listen       [::]:443 ssl http2;
       server_name  www.enrollpro.top;

       ssl_certificate "/etc/nginx/certs/server.pem";
       ssl_certificate_key "/etc/nginx/certs/server.key";
       ssl_session_cache shared:SSL:1m;
       ssl_session_timeout  10m;
       # Load configuration files for the default server block.
       include /etc/nginx/default.d/*.conf;

        root /usr/share/nginx/html/register-frontend/client/dist;
        index index.html;
        limit_conn connLimit 250;
        limit_req zone=rateLimit burst=50 nodelay;
        # 只允许来自 www.enrollpro.top 的请求
        if ($host != 'www.enrollpro.top') {
            return 403;
        }
	    location / {
	        # 对HTML文件禁用缓存
            location ~* \.html$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
            try_files $uri /index.html;
    	}

        location /gaogle/ {
            limit_conn backendConnLimit 20;
            limit_req zone=backendRateLimit burst=10;
            proxy_pass http://style-register:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /storage/ {
            proxy_pass http://minio:9001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        error_page 429 /429.html;
        location = /429.html {
            root /usr/share/nginx/html;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
   }

   server {
       listen       443 ssl http2;
       listen       [::]:443 ssl http2;
       server_name  enterprise.enrollpro.top;

       ssl_certificate "/etc/nginx/certs/enterprise.pem";
       ssl_certificate_key "/etc/nginx/certs/enterprise.key";
       ssl_session_cache shared:SSL:1m;
       ssl_session_timeout  10m;
       # Load configuration files for the default server block.
       include /etc/nginx/default.d/*.conf;

        root /usr/share/nginx/html/register-frontend/enterprise/dist;
        index index.html;
        limit_conn connLimit 250;
        limit_req zone=rateLimit burst=50 nodelay;
        # 只允许来自 enterprise.enrollpro.top 的请求
        if ($host != 'enterprise.enrollpro.top') {
            return 403;
        }
	    location / {
	        # 对HTML文件禁用缓存
            location ~* \.html$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
            try_files $uri /index.html;
    	}

        location /gaogle/ {
            limit_conn backendConnLimit 20;
            limit_req zone=backendRateLimit burst=10;
            proxy_pass http://style-register:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /storage/ {
            proxy_pass http://minio:9001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        error_page 429 /429.html;
        location = /429.html {
            root /usr/share/nginx/html;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
   }

   server {
       listen       443 ssl http2;
       listen       [::]:443 ssl http2;
       server_name  admin.enrollpro.top;

       ssl_certificate "/etc/nginx/certs/admin.pem";
       ssl_certificate_key "/etc/nginx/certs/admin.key";
       ssl_session_cache shared:SSL:1m;
       ssl_session_timeout  10m;
       # Load configuration files for the default server block.
       include /etc/nginx/default.d/*.conf;

        root /usr/share/nginx/html/register-frontend/admin/dist;
        index index.html;
        limit_conn connLimit 250;
        limit_req zone=rateLimit burst=50 nodelay;
        # 只允许来自 admin.enrollpro.top 的请求
        if ($host != 'admin.enrollpro.top') {
            return 403;
        }

	    location / {
	        # 对HTML文件禁用缓存
            location ~* \.html$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
            try_files $uri /index.html;
    	}

        location /gaogle/ {
            limit_conn backendConnLimit 20;
            limit_req zone=backendRateLimit burst=10;
            proxy_pass http://style-register:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /storage/ {
            proxy_pass http://minio:9001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        error_page 429 /429.html;
        location = /429.html {
            root /usr/share/nginx/html;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
   }

}


